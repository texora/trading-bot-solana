import axios from "axios";
import * as qs from "qs";
import { ETHERSCAN_API_KEY, ETHERSCAN_API_URL } from "./constants";

export async function verifyContract(
	contractAddress: string,
	constructorArguements: string
) {
	let data = qs.stringify({
		apiKey: ETHERSCAN_API_KEY,
		module: "contract",
		action: "verifysourcecode",
		contractaddress: contractAddress,
		codeformat: "solidity-single-file",
		contractname: "SafeToken",
		compilerversion: "v0.8.20+commit.a1b79de6",
		optimizationUsed: "1",
		runs: "200",
		constructorArguements: constructorArguements,
		sourceCode:
			'\n\n\n\n\npragma solidity 0.8.20;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, "SafeMath: addition overflow");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, "SafeMath: subtraction overflow");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, "SafeMath: multiplication overflow");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, "SafeMath: division by zero");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor (address depowner) {\n        address msgSender = depowner;\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract SafeToken is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private bots;\n    mapping(address => uint256) private _holderLastTransferTimestamp;\n    bool public transferDelayEnabled = true;\n    address payable private _taxWallet;\n\n    uint256 private _initialBuyTax=20;\n    uint256 private _initialSellTax=25;\n    uint256 private _finalBuyTax=0;\n    uint256 private _finalSellTax=0;\n    uint256 private _reduceBuyTaxAt=0;\n    uint256 private _reduceSellTaxAt=0;\n    uint256 private _preventSwapBefore=0;\n    uint256 private _buyCount=0;\n\n    uint8 private  _decimals ;\n    uint256 private  _tTotal ;\n    string private  _name  ;\n    string private  _symbol ;\n    uint256 public _maxTxAmount = 2000000 * 10**_decimals;\n    uint256 public _maxWalletSize = 2000000 * 10**_decimals;\n    uint256 public _taxSwapThreshold= 200000 * 10**_decimals;\n    uint256 public _maxTaxSwap= 1700000 * 10**_decimals;\n    address public _marketingWallet;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n\n    event MaxTxAmountUpdated(uint _maxTxAmount);\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor (uint256 _totalSupply,uint256 _initBuyTax,uint256 _initSellTax,string memory _tokenSymbol,string memory _tokenName,address marketingWallet,uint8 _decimal,uint256 finalSellTax,uint256 finalBuyTax,address devWallet)Ownable(devWallet) {\n        _tTotal=_totalSupply * 10**_decimal;\n        _decimals=_decimal;\n        _initialBuyTax=_initBuyTax;\n        _initialSellTax=_initSellTax;\n        _finalBuyTax=finalBuyTax;\n        _finalSellTax=finalSellTax;\n        _marketingWallet=marketingWallet;\n        _name=_tokenName;\n        _symbol=_tokenSymbol;\n        _taxWallet = payable(devWallet);\n        \n        _balances[devWallet] = _tTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[devWallet] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_taxWallet] = true;\n\n        emit Transfer(address(0), devWallet, _tTotal);\n    }\n\n    function name() public view  returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view  returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), "ERC20: approve from the zero address");\n        require(spender != address(0), "ERC20: approve to the zero address");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function setNewMarketingWallet(address newWallet) public  onlyOwner{\n        _marketingWallet=newWallet;\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), "ERC20: transfer from the zero address");\n        require(to != address(0), "ERC20: transfer to the zero address");\n        require(amount > 0, "Transfer amount must be greater than zero");\n        uint256 taxAmount=0;\n        if (from != owner() && to != owner()) {\n            taxAmount = amount.mul(_initialBuyTax).div(100);\n\n            if (transferDelayEnabled) {\n                  if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\n                      require(\n                          _holderLastTransferTimestamp[tx.origin] <\n                              block.number,\n                          "_transfer:: Transfer Delay enabled.  Only one purchase per block allowed."\n                      );\n                      _holderLastTransferTimestamp[tx.origin] = block.number;\n                  }\n              }\n\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\n                require(amount <= _maxTxAmount, "Exceeds the _maxTxAmount.");\n                require(balanceOf(to) + amount <= _maxWalletSize, "Exceeds the maxWalletSize.");\n                _buyCount++;\n            }\n\n            if(to == uniswapV2Pair && from!= address(this) ){\n                taxAmount = amount.mul(_initialSellTax).div(100);\n            }\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 50000000000000000) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\n        if(taxAmount>0){\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\n          emit Transfer(from, address(this),taxAmount);\n        }\n        _balances[from]=_balances[from].sub(amount);\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\n        emit Transfer(from, to, amount.sub(taxAmount));\n    }\n\n\n    function min(uint256 a, uint256 b) private pure returns (uint256){\n      return (a>b)?b:a;\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function removeLimits() external onlyOwner{\n        _maxTxAmount = _tTotal;\n        _maxWalletSize=_tTotal;\n        transferDelayEnabled=false;\n        emit MaxTxAmountUpdated(_tTotal);\n    }\n\n    function sendETHToFee(uint256 amount) private {\n        _taxWallet.transfer(amount.div(2));\n        payable (_marketingWallet).transfer(amount.div(2));\n    }\n\n\n    function openTrading() external onlyOwner() {\n        require(!tradingOpen,"trading is already open");\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n        swapEnabled = true;\n        tradingOpen = true;\n    }\n\n    receive() external payable {}\n\n    function manualSwap() external {\n        require(_msgSender()==_taxWallet);\n        uint256 tokenBalance=balanceOf(address(this));\n        if(tokenBalance>0){\n          swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance=address(this).balance;\n        if(ethBalance>0){\n          sendETHToFee(ethBalance);\n        }\n    }\n     function buyTax() public  view returns(uint256) {\n       return  _initialBuyTax;\n    }\n    function sellTax() public  view returns(uint256) {\n       return  _initialSellTax;\n    }\n    function setFinalTax() public onlyOwner {\n        _initialBuyTax=_finalBuyTax;\n        _initialSellTax=_finalSellTax;\n    }\n}',
	});

	let config = {
		method: "post",
		maxBodyLength: Infinity,
		url: ETHERSCAN_API_URL,
		headers: {
			"Content-Type": "application/x-www-form-urlencoded",
		},
		data: data,
	};

	return axios
		.request(config)
		.then((response) => {
			console.log(JSON.stringify(response.data));
			return response.data;
		})
		.catch((error) => {
			console.log(error);
		});
}
