/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployNewContract"
      | "deployedContractAddress"
      | "devWallet"
      | "owner"
      | "renounceOwnership"
      | "revenueWallet"
      | "setFees"
      | "setNewDevWallet"
      | "setNewRevWallet"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewContractDeployed" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployNewContract",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revenueWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewDevWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewRevWallet",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployNewContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewDevWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewRevWallet",
    data: BytesLike
  ): Result;
}

export namespace NewContractDeployedEvent {
  export type InputTuple = [
    deployedAddress: AddressLike,
    symbol: string,
    tokenName: string,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    deployedAddress: string,
    symbol: string,
    tokenName: string,
    totalSupply: bigint
  ];
  export interface OutputObject {
    deployedAddress: string;
    symbol: string;
    tokenName: string;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Deployer extends BaseContract {
  connect(runner?: ContractRunner | null): Deployer;
  waitForDeployment(): Promise<this>;

  interface: DeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployNewContract: TypedContractMethod<
    [
      _totalSupply: BigNumberish,
      _initBuyTax: BigNumberish,
      _initSellTax: BigNumberish,
      _tokenSymbol: string,
      _tokenName: string,
      marketingWallet: AddressLike,
      _decimal: BigNumberish,
      finalSellTax: BigNumberish,
      finalBuyTax: BigNumberish
    ],
    [void],
    "payable"
  >;

  deployedContractAddress: TypedContractMethod<[], [string], "view">;

  devWallet: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revenueWallet: TypedContractMethod<[], [string], "view">;

  setFees: TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  setNewDevWallet: TypedContractMethod<
    [_devWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setNewRevWallet: TypedContractMethod<
    [_revWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployNewContract"
  ): TypedContractMethod<
    [
      _totalSupply: BigNumberish,
      _initBuyTax: BigNumberish,
      _initSellTax: BigNumberish,
      _tokenSymbol: string,
      _tokenName: string,
      marketingWallet: AddressLike,
      _decimal: BigNumberish,
      finalSellTax: BigNumberish,
      finalBuyTax: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deployedContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "devWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revenueWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNewDevWallet"
  ): TypedContractMethod<[_devWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNewRevWallet"
  ): TypedContractMethod<[_revWallet: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "NewContractDeployed"
  ): TypedContractEvent<
    NewContractDeployedEvent.InputTuple,
    NewContractDeployedEvent.OutputTuple,
    NewContractDeployedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "NewContractDeployed(address,string,string,uint256)": TypedContractEvent<
      NewContractDeployedEvent.InputTuple,
      NewContractDeployedEvent.OutputTuple,
      NewContractDeployedEvent.OutputObject
    >;
    NewContractDeployed: TypedContractEvent<
      NewContractDeployedEvent.InputTuple,
      NewContractDeployedEvent.OutputTuple,
      NewContractDeployedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
